// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: image.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (url)
VALUES ($1)
RETURNING id, url
`

func (q *Queries) CreateImage(ctx context.Context, url string) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, url)
	var i Image
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, url FROM images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id uuid.UUID) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET url = $1
WHERE id = $2
RETURNING id, url
`

type UpdateImageParams struct {
	Url string    `json:"url"`
	ID  uuid.UUID `json:"id"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage, arg.Url, arg.ID)
	var i Image
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}
