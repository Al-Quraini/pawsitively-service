// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: like.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (
    liked_post_id, user_id
) VALUES (
    $1, $2
) RETURNING id, liked_post_id, user_id, created_at
`

type CreateLikeParams struct {
	LikedPostID uuid.UUID `json:"liked_post_id"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike, arg.LikedPostID, arg.UserID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.LikedPostID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE id = $1
`

func (q *Queries) DeleteLike(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLike, id)
	return err
}

const getLike = `-- name: GetLike :one
SELECT id, liked_post_id, user_id, created_at FROM likes
WHERE liked_post_id = $1 LIMIT 1
`

func (q *Queries) GetLike(ctx context.Context, likedPostID uuid.UUID) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLike, likedPostID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.LikedPostID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
