// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: pet.sql

package db

import (
	"context"
	"database/sql"
)

const createPet = `-- name: CreatePet :one
INSERT INTO pets (
    name, about, user_id, age, gender, pet_type, breed, image_url, medical_condition
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, about, user_id, age, gender, pet_type, breed, image_url, medical_condition, created_at, updated_at
`

type CreatePetParams struct {
	Name             string         `json:"name"`
	About            sql.NullString `json:"about"`
	UserID           int64          `json:"user_id"`
	Age              int32          `json:"age"`
	Gender           string         `json:"gender"`
	PetType          string         `json:"pet_type"`
	Breed            sql.NullString `json:"breed"`
	ImageUrl         sql.NullString `json:"image_url"`
	MedicalCondition sql.NullString `json:"medical_condition"`
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) (Pet, error) {
	row := q.db.QueryRowContext(ctx, createPet,
		arg.Name,
		arg.About,
		arg.UserID,
		arg.Age,
		arg.Gender,
		arg.PetType,
		arg.Breed,
		arg.ImageUrl,
		arg.MedicalCondition,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.About,
		&i.UserID,
		&i.Age,
		&i.Gender,
		&i.PetType,
		&i.Breed,
		&i.ImageUrl,
		&i.MedicalCondition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets
WHERE id = $1
`

func (q *Queries) DeletePet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePet, id)
	return err
}

const getPetById = `-- name: GetPetById :one
SELECT id, name, about, user_id, age, gender, pet_type, breed, image_url, medical_condition, created_at, updated_at FROM pets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPetById(ctx context.Context, id int64) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetById, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.About,
		&i.UserID,
		&i.Age,
		&i.Gender,
		&i.PetType,
		&i.Breed,
		&i.ImageUrl,
		&i.MedicalCondition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPets = `-- name: GetPets :many
SELECT id, name, about, user_id, age, gender, pet_type, breed, image_url, medical_condition, created_at, updated_at FROM pets
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) GetPets(ctx context.Context, userID int64) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, getPets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.About,
			&i.UserID,
			&i.Age,
			&i.Gender,
			&i.PetType,
			&i.Breed,
			&i.ImageUrl,
			&i.MedicalCondition,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePet = `-- name: UpdatePet :one
UPDATE pets
SET 
    name = $1,
    about = $2,
    age = $3,
    gender = $4,
    pet_type = $5,
    breed = $6,
    image_url = $7,
    medical_condition = $8,
    updated_at = now()
WHERE id = $9
RETURNING id, name, about, user_id, age, gender, pet_type, breed, image_url, medical_condition, created_at, updated_at
`

type UpdatePetParams struct {
	Name             string         `json:"name"`
	About            sql.NullString `json:"about"`
	Age              int32          `json:"age"`
	Gender           string         `json:"gender"`
	PetType          string         `json:"pet_type"`
	Breed            sql.NullString `json:"breed"`
	ImageUrl         sql.NullString `json:"image_url"`
	MedicalCondition sql.NullString `json:"medical_condition"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) (Pet, error) {
	row := q.db.QueryRowContext(ctx, updatePet,
		arg.Name,
		arg.About,
		arg.Age,
		arg.Gender,
		arg.PetType,
		arg.Breed,
		arg.ImageUrl,
		arg.MedicalCondition,
		arg.ID,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.About,
		&i.UserID,
		&i.Age,
		&i.Gender,
		&i.PetType,
		&i.Breed,
		&i.ImageUrl,
		&i.MedicalCondition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
