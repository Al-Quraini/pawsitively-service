// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: post.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
title, body, user_id, image_id, status
) VALUES (
$1, $2, $3, $4, $5
) RETURNING id, title, body, user_id, image_id, status, likes_count, created_at, updated_at
`

type CreatePostParams struct {
	Title   sql.NullString `json:"title"`
	Body    sql.NullString `json:"body"`
	UserID  uuid.UUID      `json:"user_id"`
	ImageID uuid.NullUUID  `json:"image_id"`
	Status  sql.NullString `json:"status"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.ImageID,
		arg.Status,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.ImageID,
		&i.Status,
		&i.LikesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, body, user_id, image_id, status, likes_count, created_at, updated_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.ImageID,
		&i.Status,
		&i.LikesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
title = $1,
body = $2,
image_id = $3,
status = $4,
updated_at = now()

WHERE id = $5
RETURNING id, title, body, user_id, image_id, status, likes_count, created_at, updated_at
`

type UpdatePostParams struct {
	Title   sql.NullString `json:"title"`
	Body    sql.NullString `json:"body"`
	ImageID uuid.NullUUID  `json:"image_id"`
	Status  sql.NullString `json:"status"`
	ID      uuid.UUID      `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Body,
		arg.ImageID,
		arg.Status,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.ImageID,
		&i.Status,
		&i.LikesCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
